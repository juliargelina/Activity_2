from datetime import datetime

class ScheduleSlot:
    def __init__(self, slot_id, date, start_time, end_time, status='available'):
        self.__slot_id = slot_id
        self.__date = date
        self.__start_time = start_time
        self.__end_time = end_time
        self.__status = status
        self.__duration = self.__compute_slot_duration()

    def mark_as_booked(self):
        self.__status = 'booked'

    def mark_as_available(self):
        self.__status = 'available'

    def mark_as_cancelled(self):
        self.__status = 'cancelled'

    def update_schedule_slot(self, date=None, start_time=None, end_time=None, status=None):
        if date:
            self.__date = date
        if start_time:
            self.__start_time = start_time
        if end_time:
            self.__end_time = end_time
        if status:
            self.__status = status

    def get_schedule_slot_details(self):
        return {
            'slot_id': self.__slot_id,
            'date': self.__date,
            'start_time': self.__start_time,
            'end_time': self.__end_time,
            'status': self.__status
        }

    def __compute_slot_duration(self):
        return self.__end_time - self.__start_time


class SessionNotes:
    def __init__(self, session_notes_id, title, notes, added_by, date_added=None):
        self.__session_notes_id = session_notes_id
        self.__title = title
        self.__notes = notes
        self.__added_by = added_by  # Counselor object
        self.__date_added = date_added if date_added else datetime.now()

    def update_session_notes(self, title=None, notes=None):
        if title:
            self.__title = title
        if notes:
            self.__notes = notes

    def get_session_notes(self):
        return {
            'session_notes_id': self.__session_notes_id,
            'title': self.__title,
            'notes': self.__notes,
            # ‚úÖ Fixed: only counselor's name, not whole dict
            'added_by': self.__added_by.get_details()["name"],
            'date_added': self.__date_added
        }


class Session:
    def __init__(self, session_id, session_schedule, student, counselor):
        self.__session_id = session_id
        self.__session_schedule = session_schedule
        self.__student = student
        self.__counselor = counselor
        self.__session_notes = None

    def update_session_details(self, session_schedule=None, student=None, counselor=None):
        if session_schedule:
            self.__session_schedule = session_schedule
        if student:
            self.__student = student
        if counselor:
            self.__counselor = counselor
    
    def get_session_details(self):
        return {
            'session_id': self.__session_id,
            'session_schedule': self.__session_schedule,
            'student': self.__student,
            'counselor': self.__counselor,
            'session_notes': self.__session_notes
        }


class GuidanceSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, guidance_area, academic_concerns,
                 social_concerns, is_resolved, is_followup_needed):
        super().__init__(session_id, session_schedule, student, counselor)
        self._Session__session_notes = session_notes
        self.__guidance_area = guidance_area
        self.__academic_concerns = academic_concerns
        self.__social_concerns = social_concerns
        self.__is_resolved = is_resolved
        self.__is_followup_needed = is_followup_needed

    def add_session_notes(self, session_notes):
        self._Session__session_notes = session_notes

    def get_session_notes(self):
        return (
            self._Session__session_notes.get_session_notes()
            if self._Session__session_notes else None
        )

    def get_guidance_area(self):
        return self.__guidance_area

    def get_academic_concerns(self):
        return self.__academic_concerns

    def get_social_concerns(self):
        return self.__social_concerns

    def get_is_resolved(self):
        return self.__is_resolved

    def get_is_followup_needed(self):
        return self.__is_followup_needed

    def update_guidance_area(self, guidance_area):
        self.__guidance_area = guidance_area

    def update_academic_concerns(self, academic_concerns):
        self.__academic_concerns = academic_concerns

    def update_social_concerns(self, social_concerns):
        self.__social_concerns = social_concerns

    def update_is_resolved(self, status):
        if status is True:
            self.__is_resolved = "‚úÖ Session is Resolved"
        elif status is False:
            self.__is_resolved = "‚ùå Session is Not Resolved"
        else:
            raise ValueError('Please choose only between True/False')

    def update_is_followup_needed(self, status):
        if status is True:
            self.__is_followup_needed = "üîÑ Student needs a follow-up session"
        elif status is False:
            self.__is_followup_needed = "‚úî No follow-up needed. Session resolved"
        else:
            raise ValueError('Please choose only between True/False')


class Adviser:
    def __init__(self, adviser_id, name, department):
        self.__adviser_id = adviser_id
        self.__name = name
        self.__department = department
        self.__email_address = None
        self.__mobile_no = None
        self.__advisees = []
    
    def get_adviser_details(self):
        return {
            'adviser_id': self.__adviser_id,
            'name': self.__name,
            'department': self.__department,
            'email_address': self.__email_address,
            'mobile_no': self.__mobile_no,
            'advisees': [advisee.get_student_details() for advisee in self.__advisees]
        }

    def update_adviser_details(self, department=None, email_address=None, mobile_no=None):
        if department:
            self.__department = department
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no

    def get_advisees(self):
        return self.__advisees

    def update_advisees(self, advisee):
        self.__advisees.append(advisee)


class Student:
    def __init__(self, id_number, name, degree_program, birthday):
        self.__id_number = id_number
        self.__name = name
        self.__degree_program = degree_program
        self.__birthday = birthday
        self.__mobile_no = None
        self.__email_address = None
        self.__adviser = None

    def get_student_details(self):
        return {
            'id_number': self.__id_number,
            'name': self.__name,
            'degree_program': self.__degree_program,
            'birthday': self.__birthday,
            'mobile_no': self.__mobile_no,
            'email_address': self.__email_address,
            'adviser': self.__adviser
        }
    
    def set_adviser(self, adviser):
        self.__adviser = adviser

    def set_email(self, email_address):
        self.__email_address = email_address

    def set_degree_program(self, degree_program):
        self.__degree_program = degree_program

    def set_mobile_no(self, mobile_no):
        self.__mobile_no = mobile_no


class Counselor:
    def __init__(self, counselor_id, name, license_number):
        self.__counselor_id = counselor_id
        self.__name = name
        self.__email_address = None
        self.__mobile_no = None
        self.__license_number = license_number
        self.__schedule = []

    def get_details(self):
        return {
            "id number": self.__counselor_id,
            "name": self.__name,
            "email address": self.__email_address,
            "mobile no": self.__mobile_no,
            "license number": self.__license_number,
            "schedule": self.__schedule
        }
    
    def get_schedule(self):
        return self.__schedule
    
    def update_counselor_details(self, name=None, email_address=None, mobile_no=None, schedule=None):
        if name:
            self.__name = name
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no
        if schedule:
            self.__schedule = schedule


class GuidanceCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, academic_specialties=None, support_programs=None, disciplinary_liaison=False):
        super().__init__(counselor_id, name, license_number)
        self.__academic_specialties = academic_specialties or []
        self.__support_programs = support_programs or []
        self.__disciplinary_liaison = disciplinary_liaison

    def get_academic_specialties(self):
        return self.__academic_specialties
    
    def update_academic_specialties(self, new_specialties):
        self.__academic_specialties = new_specialties
    
    def get_student_support_programs(self):
        return self.__support_programs
    
    def update_student_support_programs(self, new_programs):
        self.__support_programs = new_programs
    
    def get_disciplinary_liaison(self):
        return "Yes" if self.__disciplinary_liaison else "No"
    
    def update_disciplinary_liaison(self, status):
        self.__disciplinary_liaison = status


class CareerCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, industry_expertise=None, career_tools=None, alumni_connections=None):
        super().__init__(counselor_id, name, license_number)
        self.__industry_expertise = industry_expertise or []
        self.__career_tools = career_tools or []
        self.__alumni_connections = alumni_connections or []

    def get_industry_expertise(self):
        return self.__industry_expertise
    
    def update_industry_expertise(self, new_expertise):
        self.__industry_expertise = new_expertise
    
    def get_career_assessment_tools(self):
        return self.__career_tools
    
    def update_career_assessment_tools(self, new_tools):
        self.__career_tools = new_tools
    
    def get_alumni_network_connections(self):
        return self.__alumni_connections
    
    def update_alumni_network_connections(self, new_connections):
        self.__alumni_connections = new_connections


class MentalHealthCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, specialization=None, therapeutic_approaches=None):
        super().__init__(counselor_id, name, license_number)
        self.__specialization = specialization or ""
        self.__therapeutic_approaches = therapeutic_approaches or []

    def get_specialization(self):
        return self.__specialization
    
    def update_specialization(self, new_specialization):
        self.__specialization = new_specialization
    
    def get_approaches(self):
        return self.__therapeutic_approaches
    
    def update_therapeutic_approaches(self, new_approaches):
        self.__therapeutic_approaches = new_approaches


# --- Testing ---

counselor = Counselor("C001", "Dr. Reyes", "LIC001")
student = "Juan Dela Cruz"

notes1 = SessionNotes(session_notes_id="SN001", 
                      title="First Meeting",
                      notes="Talked about time management", 
                      added_by=counselor)

gs1 = GuidanceSession(
    session_id="GS001",
    session_schedule="2025-08-21 10:00",
    student=student,
    counselor=counselor,
    session_notes=None,
    guidance_area="Academic Planning",
    academic_concerns=["Study Skills", "Time Management"],
    social_concerns=["Peer Relationships"],
    is_resolved=False,
    is_followup_needed=False
)



session_notes_dict = notes1.get_session_notes()
print(f"Session Notes ID: {session_notes_dict['session_notes_id']}")
print(f"Title: {session_notes_dict['title']}")
print(f"Notes: {session_notes_dict['notes']}")
print(f"Added By: {session_notes_dict['added_by']}")   # ‚úÖ Counselor name only
print(f"Date Added: {session_notes_dict['date_added']}")

print(f"\nGuidance Area: {gs1.get_guidance_area()}")
print(f"Academic Concerns: {gs1.get_academic_concerns()}")
print(f"Social Concerns: {gs1.get_social_concerns()}")
print(f"Is Resolved? {gs1.get_is_resolved()}")
print(f"Follow-up Needed? {gs1.get_is_followup_needed()}")

gs1.update_is_resolved(True)      
gs1.update_is_followup_needed(False)  
gs1.update_guidance_area("Scholarship Inquiry")

print("\nAfter updates:")
print(f"Guidance Area: {gs1.get_guidance_area()}")
print(f"Is Resolved? {gs1.get_is_resolved()}")
print(f"Follow-up Needed? {gs1.get_is_followup_needed()}")

role = "disciplinary"
gc = GuidanceCounselor(
    counselor_id="GC001",
    name="Ms. Santos",
    license_number="LIC12345",
    academic_specialties=["Mathematics", "Science"],
    support_programs=["Peer Mentoring", "Academic Coaching"],
    disciplinary_liaison=(role == "disciplinary")
)
gc.update_counselor_details(
    email_address="ms.santos@school.edu",
    mobile_no="0917-123-4567",
    schedule=["Monday 9AM-11AM", "Wednesday 2PM-4PM"]
)

cc = CareerCounselor(
    counselor_id="CC001",
    name="Mr. Reyes",
    license_number="LIC67890",
    industry_expertise=["Engineering", "IT"],
    career_tools=["Aptitude Test", "Personality Test"],
    alumni_connections=["Eng. Dela Cruz", "IT Specialist"]
)
cc.update_counselor_details(
    email_address="mr.reyes@careercenter.org",
    mobile_no="0920-987-6543",
    schedule=["Tuesday 10AM-12PM", "Thursday 1PM-3PM"]
)

mhc = MentalHealthCounselor(
    counselor_id="MHC001",
    name="Dr. Cruz",
    license_number="LIC54321",
    specialization="Clinical Psychology",
    therapeutic_approaches=["CBT", "Mindfulness"]
)
mhc.update_counselor_details(
    email_address="dr.cruz@clinic.com",
    mobile_no="0998-555-1122",
    schedule=["Friday 9AM-5PM"]
)

print("\nCareer Counselor Details:\n")
cc_details = cc.get_details()
print(f"ID Number: {cc_details['id number']}")
print(f"Name: {cc_details['name']}")
print(f"Email Address: {cc_details['email address']}")
print(f"Mobile No: {cc_details['mobile no']}")
print(f"License Number: {cc_details['license number']}")
print(f"Schedule: {', '.join(cc_details['schedule'])}")
print(f"Industry Expertise: {', '.join(cc.get_industry_expertise())}")
print(f"Career Tools: {', '.join(cc.get_career_assessment_tools())}")
print(f"Alumni Connections: {', '.join(cc.get_alumni_network_connections())}")

print("\nGuidance Counselor Details:\n")
gc_details = gc.get_details()
print(f"ID Number: {gc_details['id number']}")
print(f"Name: {gc_details['name']}")
print(f"Email Address: {gc_details['email address']}")
print(f"Mobile No: {gc_details['mobile no']}")
print(f"License Number: {gc_details['license number']}")
print(f"Schedule: {', '.join(gc_details['schedule'])}")
print(f"Specialties: {', '.join(gc.get_academic_specialties())}")
print(f"Programs: {', '.join(gc.get_student_support_programs())}")
print(f"Disciplinary Liaison: {gc.get_disciplinary_liaison()}")   # ‚úÖ Prints Yes/No

print("\nMental Health Counselor Details:\n")
mhc_details = mhc.get_details()
print(f"ID Number: {mhc_details['id number']}")
print(f"Name: {mhc_details['name']}")
print(f"Email Address: {mhc_details['email address']}")
print(f"Mobile No: {mhc_details['mobile no']}")
print(f"License Number: {mhc_details['license number']}")
print(f"Schedule: {', '.join(mhc_details['schedule'])}")
print(f"Specialization: {mhc.get_specialization()}")
print(f"Therapeutic Approaches: {', '.join(mhc.get_approaches())}")
