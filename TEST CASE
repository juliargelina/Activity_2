from datetime import datetime

class ScheduleSlot:
    def __init__(self, slot_id, date, start_time, end_time, status='available'):
        self.__slot_id = slot_id
        self.__date = date
        self.__start_time = start_time
        self.__end_time = end_time
        self.__status = status
        self.__duration = self.__compute_slot_duration()

    def mark_as_booked(self):
        self.__status = 'booked'

    def mark_as_available(self):
        self.__status = 'available'

    def mark_as_cancelled(self):
        self.__status = 'cancelled'

    def update_schedule_slot(self, date=None, start_time=None, end_time=None, status=None):
        if date:
            self.__date = date
        if start_time:
            self.__start_time = start_time
        if end_time:
            self.__end_time = end_time
        if status:
            self.__status = status

    def get_schedule_slot_details(self):
        return {
            'slot_id': self.__slot_id,
            'date': self.__date,
            'start_time': self.__start_time,
            'end_time': self.__end_time,
            'status': self.__status
        }

    def __compute_slot_duration(self):
        return self.__end_time - self.__start_time


class SessionNotes:
    def __init__(self, session_notes_id, title, notes, added_by, date_added=None):
        self.__session_notes_id = session_notes_id
        self.__title = title
        self.__notes = notes
        self.__added_by = added_by
        self.__date_added = date_added if date_added else datetime.now()

    def update_session_notes(self, title=None, notes=None):
        if title:
            self.__title = title
        if notes:
            self.__notes = notes

    def get_session_notes(self):
        return {
            'session_notes_id': self.__session_notes_id,
            'title': self.__title,
            'notes': self.__notes,
            'added_by': self.__added_by.get_details(),
            'date_added': self.__date_added
        }


class Session:
    def __init__(self, session_id, session_schedule, student, counselor):
        self.__session_id = session_id
        self.__session_schedule = session_schedule
        self.__student = student
        self.__counselor = counselor
        self.__session_notes = None

    def update_session_details(self, session_schedule=None, student=None, counselor=None):
        if session_schedule:
            self.__session_schedule = session_schedule
        if student:
            self.__student = student
        if counselor:
            self.__counselor = counselor
    
    def get_session_details(self):
        return {
            'session_id': self.__session_id,
            'session_schedule': self.__session_schedule,
            'student': self.__student,
            'counselor': self.__counselor,
            'session_notes': self.__session_notes
        }


class GuidanceSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, guidance_area, academic_concerns,
                 social_concerns, is_resolved, is_followup_needed):
        super().__init__(session_id, session_schedule, student, counselor)
        self.__session_notes = session_notes
        self.__guidance_area = guidance_area
        self.__academic_concerns = academic_concerns
        self.__social_concerns = social_concerns
        self.__is_resolved = is_resolved
        self.__is_followup_needed = is_followup_needed

    def add_session_notes(self, session_notes):
        self.__session_notes = session_notes

    def get_session_notes(self):
        return (
            self.__session_notes.get_session_notes()
            if isinstance(self.__session_notes, SessionNotes) 
            else self.__session_notes
        )

    def get_guidance_area(self):
        return self.__guidance_area

    def get_academic_concerns(self):
        return self.__academic_concerns

    def get_social_concerns(self):
        return self.__social_concerns

    def get_is_resolved(self):
        return self.__is_resolved

    def get_is_followup_needed(self):
        return self.__is_followup_needed

    def update_guidance_area(self, guidance_area):
        self.__guidance_area = guidance_area

    def update_academic_concerns(self, academic_concerns):
        self.__academic_concerns = academic_concerns

    def update_social_concerns(self, social_concerns):
        self.__social_concerns = social_concerns

    def update_is_resolved(self, status):
        if status is True:
            self.__is_resolved = "Session is Resolved"
        elif status is False:
            self.__is_resolved = "Session is Unresolved"
        else:
            raise ValueError('Please choose only between "Resolved" or "Unresolved"')

    def update_is_followup_needed(self, status):
        if status is True:
            self.__is_followup_needed = "A follow-up session is needed"
        elif status is False:
            self.__is_followup_needed = "No follow-up needed. Session resolved"
        else:
            raise ValueError('Please choose only between "Yes"or "No"')

class MentalHealthSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, chief_complaint, symptom_severity, 
                 therapeutic_approach_used, interventions, treatment_plan):
        super().__init__(session_id, session_schedule, student, counselor)
        self.__session_notes = session_notes
        self.__chief_complaint = chief_complaint
        self.__symptom_severity = symptom_severity
        self.__therapeutic_approach_used = therapeutic_approach_used
        self.__interventions = interventions
        self.__treatment_plan = treatment_plan

    def add_session_notes(self, session_notes):
        self.__session_notes = session_notes

    def get_session_notes(self):
        return (
            self.__session_notes.get_session_notes()
            if isinstance(self.__session_notes, SessionNotes) 
            else self.__session_notes
        )

    def get_chief_complaint(self):
        return self.__chief_complaint

    def get_symptom_severity(self):
        return self.__symptom_severity

    def get_therapeutic_approach_used(self):
        return self.__therapeutic_approach_used

    def get_interventions(self):
        return self.__interventions

    def get_treatment_plan(self):
        return self.__treatment_plan

    def update_chief_complaint(self, complaint):
        self.__chief_complaint = complaint

    def update_symptom_severity(self, severity):
        if 1 <= severity <= 4:
            self.__symptom_severity = 'Low'
        elif 5 <= severity <= 8:
            self.__symptom_severity = 'Medium'
        elif 9 <= severity <= 10:
            self.__symptom_severity = 'High'
        else:
            raise ValueError('Symptom must only be between 1 and 10')
    
    def update_therapeutic_approach_used(self, therapeutic_approach_used):
        self.__therapeutic_approach_used = therapeutic_approach_used

    def update_interventions(self, interventions):
        self.__interventions = interventions

    def update_treatment_plan(self, treatment_plan):
        self.__treatment_plan = treatment_plan

class CareerSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, career_goal, assessment_administered,
                 industry_focus, skill_gaps):
        super().__init__(session_id, session_schedule, student, counselor)
        self.__session_notes = session_notes
        self.__career_goal = career_goal
        self.__assessment_administered = assessment_administered
        self.__industry_focus = industry_focus
        self.__skill_gaps = skill_gaps

    def add_session_notes(self, session_notes):
        self.__session_notes = session_notes

    def get_session_notes(self):
        return (
            self.__session_notes.get_session_notes()
            if isinstance(self.__session_notes, SessionNotes) else self.__session_notes
        )

    def get_career_goal(self):
        return self.__career_goal

    def get_assessment_administered(self):
        return self.__assessment_administered

    def get_industry_focus(self):
        return self.__industry_focus

    def get_skill_gaps(self):
        return self.__skill_gaps

    def update_career_goal(self, career_goal):
        self.__career_goal = career_goal

    def update_assessment_administered(self, assessment):
        self.__assessment_administered = assessment

    def update_industry_focus(self, industry_focus):
        self.__industry_focus = industry_focus

    def update_skill_gaps(self, skill_gaps):
        self.__skill_gaps = skill_gaps


class Adviser:
    def __init__(self, adviser_id, name, department):
        self.__adviser_id = adviser_id
        self.__name = name
        self.__department = department
        self.__email_address = None
        self.__mobile_no = None
        self.__advisees = []
    
    def get_adviser_details(self):
        return {
            'adviser_id': self.__adviser_id,
            'name': self.__name,
            'department': self.__department,
            'email_address': self.__email_address,
            'mobile_no': self.__mobile_no,
            'advisees': [advisee.get_student_details() for advisee in self.__advisees]
        }

    def update_adviser_details(self, department=None, email_address=None, mobile_no=None):
        if department:
            self.__department = department
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no

    def get_advisees(self):
        return self.__advisees

    def update_advisees(self, advisee):
        self.__advisees.append(advisee)

class Student:
    def __init__(self, id_number, name, degree_program, birthday):
        self.__id_number = id_number
        self.__name = name
        self.__degree_program = degree_program
        self.__birthday = birthday
        self.__mobile_no = None
        self.__email_address = None
        self.__adviser = None

    def get_student_details(self):
        return {
            'id_number': self.__id_number,
            'name': self.__name,
            'degree_program': self.__degree_program,
            'birthday': self.__birthday,
            'mobile_no': self.__mobile_no,
            'email_address': self.__email_address,
            'adviser': self.__adviser
        }
    
    def set_adviser(self, adviser):
        self.__adviser = adviser

    def set_email(self, email_address):
        self.__email_address = email_address

    def set_degree_program(self, degree_program):
        self.__degree_program = degree_program

    def set_mobile_no(self, mobile_no):
        self.__mobile_no = mobile_no

class Counselor:
    def __init__(self, counselor_id, name, license_number):
        self.__counselor_id = counselor_id
        self.__name = name
        self.__email_address = None
        self.__mobile_no = None
        self.__license_number = license_number
        self.__schedule = []

    def get_details(self):
        return {
            "id number": self.__counselor_id,
            "name": self.__name,
            "email address": self.__email_address,
            "mobile no": self.__mobile_no,
            "license number": self.__license_number,
            "schedule": self.__schedule
        }
    
    def get_schedule(self):
        return self.__schedule
    
    def update_counselor_details(self, name=None, email_address=None, mobile_no=None, schedule=None):
        if name:
            self.__name = name
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no
        if schedule:
            self.__schedule = schedule

class GuidanceCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, academic_specialties=None, support_programs=None, disciplinary_liaison=False):
        super().__init__(counselor_id, name, license_number)
        self.__academic_specialties = academic_specialties
        self.__support_programs = support_programs
        self.__disciplinary_liaison = disciplinary_liaison

    def get_academic_specialties(self):
        return self.__academic_specialties
    
    def update_academic_specialties(self, new_specialties):
        self.__academic_specialties = new_specialties
    
    def get_student_support_programs(self):
        return self.__support_programs
    
    def update_student_support_programs(self, new_programs):
        self.__support_programs = new_programs
    
    def get_disciplinary_liaison(self):
        if self.__disciplinary_liaison:
            return "Yes"
        else:
            return "No"
    
    def update_disciplinary_liaison(self, status):
        self.__disciplinary_liaison = status

class CareerCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, industry_expertise=None, career_tools=None, alumni_connections=None):
        super().__init__(counselor_id, name, license_number)
        self.__industry_expertise = industry_expertise
        self.__career_tools = career_tools
        self.__alumni_connections = alumni_connections

    def get_industry_expertise(self):
        return self.__industry_expertise
    
    def update_industry_expertise(self, new_expertise):
        self.__industry_expertise = new_expertise
    
    def get_career_assessment_tools(self):
        return self.__career_tools
    
    def update_career_assessment_tools(self, new_tools):
        self.__career_tools = new_tools
    
    def get_alumni_network_connections(self):
        return self.__alumni_connections
    
    def update_alumni_network_connections(self, new_connections):
        self.__alumni_connections = new_connections

class MentalHealthCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, specialization=None, therapeutic_approaches=None):
        super().__init__(counselor_id, name, license_number)
        self.__specialization = specialization
        self.__therapeutic_approaches = therapeutic_approaches

    def get_specialization(self):
        return self.__specialization
    
    def update_specialization(self, new_specialization):
        self.__specialization = new_specialization
    
    def get_approaches(self):
        return self.__therapeutic_approaches
    
    def update_therapeutic_approaches(self, new_approaches):
        self.__therapeutic_approaches = new_approaches
### TESTING SCRIPT ###


##GUIDANCE
    # Create Student
    student1 = Student(
        id_number="2022-5012",
        name="Juan Dela Cruz",
        degree_program="BAMS",
        birthday="January 1, 2000")

    # Create schedule slots
    slot1 = ScheduleSlot("SLOT034", "2025-07-31", 9, 11)
    slot2 = ScheduleSlot("SLOT056", "2025-05-21", 14, 16)

    # Create Guidance Counselor
    counselor1 = GuidanceCounselor(
        counselor_id="GC001",
        name="Casey Scout",
        license_number="LIC12345",
        academic_specialties=["Mathematics", "Science"],
        support_programs=["Peer Mentoring", "Academic Coaching"],
        disciplinary_liaison=True
    )

    # Update contact info and add schedule slots
    counselor1.update_counselor_details(email_address="csout@up.edu.ph", mobile_no="0917-123-4567")
    counselor1.get_schedule().extend([slot1, slot2])  # Use existing get_schedule() list

    # Create Session Notes (pass counselor object)
    notes1 = SessionNotes(
        session_notes_id="SN001",
        title="First Meeting",
        notes="Talked about time management",
        added_by=counselor1,
        date_added=slot2.get_schedule_slot_details()['date']
    )

    # Create Guidance Session (pass student object)
    guidance1 = GuidanceSession(
        session_id="GS001",
        session_schedule=[slot1, slot2],
        student=student1,
        counselor=counselor1,
        session_notes=notes1,
        guidance_area="Academic Support",
        academic_concerns=["Study Skills", "Time Management"],
        social_concerns=["Peer Relationships"],
        is_resolved="Session is Unresolved",
        is_followup_needed="A follow-up session is needed"
    )

    # ---------------------------
    # PRINT SESSION INFORMATION
    # ---------------------------

    print(f"\nSESSION {notes1.get_session_notes()['session_notes_id']}")

    # Session Schedule
    print("Session Schedule:")
    for slot in guidance1.get_session_details()['session_schedule']:
        details = slot.get_schedule_slot_details()
        print(f"  Slot ID: {details['slot_id']}, Date: {details['date']}, Start: {details['start_time']}, End: {details['end_time']}")

    # Student info
    student_details = guidance1.get_session_details()['student'].get_student_details()
    print(f"  Student Name: {student_details['name']}")

    # Counselor Info
    counselor_details = counselor1.get_details()
    print(f"\nCounselor Information:")
    print(f"  ID: {counselor_details['id number']}")
    print(f"  Name: {counselor_details['name']}")
    print(f"  License Number: {counselor_details['license number']}")
    print(f"  Email: {counselor_details['email address']}")
    print(f"  Mobile: {counselor_details['mobile no']}")
    print(f"  Academic Specialties: {counselor1.get_academic_specialties()}")
    print(f"  Support Programs: {counselor1.get_student_support_programs()}")
    print(f"  Disciplinary Liaison: {counselor1.get_disciplinary_liaison()}")

    # Session Notes
    notes_details = notes1.get_session_notes()
    print(f"\nGuidance Session Information:")
    print("Session Notes:")
    print(f"  Notes ID: {notes_details['session_notes_id']}")
    print(f"  Title: {notes_details['title']}")
    print(f"  Notes: {notes_details['notes']}")
    print(f"  Added by: {notes_details['added_by']['name']}")
    print(f"  Date Added: {notes_details['date_added']}")

    print(f"  Guidance Area: {guidance1.get_guidance_area()}")
    print(f"  Academic Concerns: {guidance1.get_academic_concerns()}")
    print(f"  Social Concerns: {guidance1.get_social_concerns()}")
    print(f"  Is Resolved: {guidance1.get_is_resolved()}")
    print(f"  Follow-up Needed? {guidance1.get_is_followup_needed()}")

    guidance1.update_is_resolved(True)      
    guidance1.update_is_followup_needed(False)  
    guidance1.update_guidance_area("Scholarship Inquiry")

    print("\nAfter Updates:")
    print(f"  Guidance Area: {guidance1.get_guidance_area()}")
    print(f"  Is Resolved? {guidance1.get_is_resolved()}")
    print(f"  Follow-up Needed? {guidance1.get_is_followup_needed()}")



##MENTAL HEALTH
## MENTAL HEALTH
slot3 = ScheduleSlot("SLOT101", "2025-08-01", 10, 12)
slot4 = ScheduleSlot("SLOT102", "2025-08-05", 13, 15)

# Create Student
student2 = Student(
        id_number="2022-5012",
        name="Juan Dela Cruz",
        degree_program="BAMS",
        birthday="January 1, 2000")

# Create Mental Health Counselor
counselor2 = MentalHealthCounselor(
    counselor_id="MHC001",
    name="Helena Reyes",
    license_number="MHLIC67890",
    specialization=["Cognitive Behavioral Therapy", "Stress Management"],
    therapeutic_approaches=["CBT", "Mindfulness", "Solution-Focused"]
)

counselor2.update_counselor_details(email_address="hcruz@up.edu.ph", mobile_no="0917-987-6543")
counselor2.get_schedule().extend([slot3, slot4])

notes2 = SessionNotes(
    session_notes_id="SN002",
    title="Initial Consultation",
    notes="Discussed anxiety triggers and coping strategies",
    added_by=counselor2,
    date_added=slot3.get_schedule_slot_details()['date']
)

mental_health1 = MentalHealthSession(
    session_id="MHS001",
    session_schedule=[slot3, slot4],
    student=student2,  # same student as guidance session
    counselor=counselor2,
    session_notes=notes2,
    chief_complaint="Anxiety",
    symptom_severity=7,
    therapeutic_approach_used=["Cognitive Behavioral Therapy (CBT)"],
    interventions=["Coping Skill Education"],
    treatment_plan=["Weekly sessions for 8 weeks"]
)

print(f"\nSESSION {notes2.get_session_notes()['session_notes_id']}")

# Session Schedule
print("Session Schedule:")
for slot in mental_health1.get_session_details()['session_schedule']:
    details = slot.get_schedule_slot_details()
    print(f"  Slot ID: {details['slot_id']}, Date: {details['date']}, Start: {details['start_time']}, End: {details['end_time']}")

# Student info
student_details = mental_health1.get_session_details()['student'].get_student_details()
print(f"  Student Name: {student_details['name']}")

# Counselor Info
counselor_details = counselor2.get_details()
print(f"\nCounselor Information:")
print(f"  ID: {counselor_details['id number']}")
print(f"  Name: {counselor_details['name']}")
print(f"  License Number: {counselor_details['license number']}")
print(f"  Email: {counselor_details['email address']}")
print(f"  Mobile: {counselor_details['mobile no']}")
print(f"  Specialization: {counselor2.get_specialization()}")
print(f"  Therapeutic Approaches: {counselor2.get_approaches()}")

# Session Notes
notes_details = notes2.get_session_notes()
print(f"\nMental Health Session Information:")
print("Session Notes:")
print(f"  Notes ID: {notes_details['session_notes_id']}")
print(f"  Title: {notes_details['title']}")
print(f"  Notes: {notes_details['notes']}")
print(f"  Added by: {notes_details['added_by']['name']}")
print(f"  Date Added: {notes_details['date_added']}")

print(f"  Chief Complaint: {mental_health1.get_chief_complaint()}")
print(f"  Symptom Severity: {mental_health1.get_symptom_severity()}")
print(f"  Therapeutic Approach Used: {mental_health1.get_therapeutic_approach_used()}")
print(f"  Interventions: {mental_health1.get_interventions()}")
print(f"  Treatment Plan: {mental_health1.get_treatment_plan()}")

# Example updates
mental_health1.update_symptom_severity(4)
mental_health1.update_treatment_plan(["Weekly sessions for 6 weeks"])

print("\nAfter Updates:")
print(f"  Symptom Severity: {mental_health1.get_symptom_severity()}")
print(f"  Updated Treatment Plan: {mental_health1.get_treatment_plan()}")


###CAREER
## CAREER
slot5 = ScheduleSlot("SLOT201", "2025-08-10", 9, 11)
slot6 = ScheduleSlot("SLOT202", "2025-08-15", 14, 16)

# Create a different Student
student3 = Student(
    id_number="2023-4021",
    name="Maria Lopez",
    degree_program="BSIT",
    birthday="March 12, 2001"
)

# Create Career Counselor
counselor3 = CareerCounselor(
    counselor_id="CC001",
    name="Ella Santos",
    license_number="CCLIC12345",
    industry_expertise=["Healthcare"],
    career_tools=["Strong Interest Inventory"],
    alumni_connections=["Alumni Network A", "Alumni Network B"]
)

counselor3.update_counselor_details(email_address="esantos@up.edu.ph", mobile_no="0917-555-1234")
counselor3.get_schedule().extend([slot5, slot6])

# Create Session Notes
notes3 = SessionNotes(
    session_notes_id="SN003",
    title="Career Planning Consultation",
    notes="Discussed career goals and industry options",
    added_by=counselor3,
    date_added=slot5.get_schedule_slot_details()['date']
)

# Create Career Session
career1 = CareerSession(
    session_id="CS001",
    session_schedule=[slot5, slot6],
    student=student3,
    counselor=counselor3,
    session_notes=notes3,
    career_goal="Job Search Strategy",
    assessment_administered=["Myers-Briggs"],
    industry_focus=["Healthcare"],
    skill_gaps=["Project Management"]
)

print(f"\nSESSION {notes3.get_session_notes()['session_notes_id']}")

# Session Schedule
print("Session Schedule:")
for slot in career1.get_session_details()['session_schedule']:
    details = slot.get_schedule_slot_details()
    print(f"  Slot ID: {details['slot_id']}, Date: {details['date']}, Start: {details['start_time']}, End: {details['end_time']}")

# Student info
student_details = career1.get_session_details()['student'].get_student_details()
print(f"  Student Name: {student_details['name']}")

# Counselor Info
counselor_details = counselor3.get_details()
print(f"\nCounselor Information:")
print(f"  ID: {counselor_details['id number']}")
print(f"  Name: {counselor_details['name']}")
print(f"  License Number: {counselor_details['license number']}")
print(f"  Email: {counselor_details['email address']}")
print(f"  Mobile: {counselor_details['mobile no']}")
print(f"  Industry Expertise: {counselor3.get_industry_expertise()}")
print(f"  Career Tools: {counselor3.get_career_assessment_tools()}")
print(f"  Alumni Connections: {counselor3.get_alumni_network_connections()}")

# Session Notes
notes_details = notes3.get_session_notes()
print(f"\nCareer Session Information:")
print("Session Notes:")
print(f"  Notes ID: {notes_details['session_notes_id']}")
print(f"  Title: {notes_details['title']}")
print(f"  Notes: {notes_details['notes']}")
print(f"  Added by: {notes_details['added_by']['name']}")
print(f"  Date Added: {notes_details['date_added']}")

print(f"  Career Goal: {career1.get_career_goal()}")
print(f"  Assessment Administered: {career1.get_assessment_administered()}")
print(f"  Industry Focus: {career1.get_industry_focus()}")
print(f"  Skill Gaps: {career1.get_skill_gaps()}")

# Example updates
career1.update_assessment_administered("Strong Interest Inventory")
career1.update_career_goal("Hospital Administration")
career1.update_skill_gaps(["Public Speaking"])

print("\nAfter Updates:")
print(f"  Assessment Administered: {career1.get_assessment_administered()}")
print(f"  Career Goal: {career1.get_career_goal()}")
print(f"  Updated Skill Gaps: {career1.get_skill_gaps()}")
