class Adviser:
    '''
    Represents an Adviser in the Student Counseling Data Management system
    '''
    def __init__(self, name, email, contact_number, department, office_hours, advisor_id, consulting_students):
        '''
        Initialize a new instance of the Adviser class.
        Parameters: 
        name = Full name of the adviser
        department = the Department of the adviser
        office_hours = The working hours of the adviser
        consulting_students = the names of the students who will consult. 
        '''
        self.id = advisor_id 
        self.__name = name
        self.__email = None  # placeholder for email
        self.__contact_number = None  # placeholder for contact number
        self.__department = department
        self.__office_hours = office_hours
        self.__consulting_students = consulting_students

    # ID
    def get_advisor_id(self):
        return self.id
    
    # Name
    def get_name(self):
        ''' Return the full name of the Adviser. '''
        return self.__name  # Corrected from self.name to self.__name

    # Email
    def get_email(self):
        ''' Return the email of the adviser. '''
        return self.__email

    def set_email(self, email):  
        ''' 
        Set email for the adviser. 
        Validates the email format before setting it. 
        '''
        if '@' in email and '.' in email:
            self.__email = email
        else:
            raise ValueError("Invalid email address format")

    # Contact Number
    def get_contact_number(self):
        ''' Return the contact number of the adviser. '''
        return self.__contact_number  # Corrected from self._contact_number to self.__contact_number

    def set_contact_number(self, contact_number):
        '''
        Set the contact number for the adviser.
        Validates the mobile number format before setting it.
        The contact number should be 11 digits long and numeric.
        '''
        if len(contact_number) == 11 and contact_number.isdigit():
            self.__contact_number = contact_number  # Corrected from self._contact_number to self.__contact_number
        else:
            raise ValueError("Invalid mobile number format")

    # Department
    def get_department(self):
        ''' Return the department of the adviser. '''
        return self.__department  # Corrected from self._department to self.__department

    # Office Hours
    def get_office_hours(self): 
        ''' Return the office hours of the adviser. '''
        return self.__office_hours  # Corrected from self.office_hours to self.__office_hours

    # Consulting Students  
    def get_consulting_students(self):
        ''' Return consulting students of the adviser. '''
        return self.__consulting_students  # Corrected from self.__consulting_students to self.__consulting_students


# Testing
if __name__ == "__main__":
    adviser_1 = Adviser(
        advisor_id= "2022-034945",
        name="Casey Scout", 
        email=None, 
        contact_number=None,
        department="Faculty of Information and Communication Studies",
        office_hours="Monday - Friday (7AM to 4PM)", 
        consulting_students="Dela Cruz, J.\n\t\tGarcia, J."
    )

    print ("Advisor ID:", adviser_1.get_advisor_id())
    print("Name:", adviser_1.get_name())

    adviser_1.set_email("cscout@up.edu.ph")
    print("Email:", adviser_1.get_email())

    adviser_1.set_contact_number("09212023775")
    print("Contact Number:", adviser_1.get_contact_number())

    print("Department:", adviser_1.get_department())
    print("Office Hours:", adviser_1.get_office_hours())
    print("Consulting Students:", adviser_1.get_consulting_students())
