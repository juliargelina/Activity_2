'''Original encapsulated code with no testing'''

class adviser:
     def __init__(self, advisor_id, name, email, contact_number, department, office_hours, consulting_students):

          #public
          self.advisor_id = advisor_id

          #private
          self.__name = name
          self.__email = None
          self.__contact_number = None
          self.__department = department
          
          #protected
          self._consulting_students = consulting_students
          self._office_hours = office_hours

#PUBLIC
#advisor id
     def get_advisor_id(self):
        return self.advisor_id

#PRIVATE
#name
     def get_name(self):
        return self.__name

#email
     def get_email(self):
        return self.__email
     def set_email(self, email):  
        if '@' in email and '.' in email:
            self.__email = email
        else:
            raise ValueError("Invalid email address format")


#contact number
     def get_contact_number(self):
        return self.__contact_number
     def set_contact_number(self, contact_number):
        if len(contact_number) == 11 and contact_number.isdigit():
            self.__contact_number = contact_number
        else:
            raise ValueError("Invalid mobile number format")
#department
     def get_department(self):
        return self.__department



#PROTECTED (could be into subclass)
#office hours
     def get_office_hours(self): 
        return self._office_hours
     
#consulting student  
     def get_consulting_students(self):
        return self._consulting_students    
