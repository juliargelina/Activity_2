from datetime import datetime, date
from abc import ABC, abstractmethod

'''
Student Counseling Data Management System (SCDMS): Schedule Slot Module
This class represents the schedule slot module of the SCDMS.
'''

###### THIS IS THE SCHEDULE SLOT CLASS. DO NOT EDIT THIS CLASS ######
class ScheduleSlot:
    '''
    Represents a schedule slot in the Student Counseling Data Management System.
    This class contains attributes and methods related to schedule slots.
    '''
    def __init__(self, slot_id, date, start_time, end_time, status='available'):
        self.__slot_id = slot_id
        self.__date = date
        self.__start_time = start_time
        self.__end_time = end_time
        self.__status = status
        self.__duration = self.__compute_slot_duration()

    def mark_as_booked(self):
        self.__status = 'booked'

    def mark_as_available(self):
        self.__status = 'available'

    def mark_as_cancelled(self):
        self.__status = 'cancelled'

    def update_schedule_slot(self, date=None, start_time=None, end_time=None, status=None):
        if date:
            self.__date = date
        if start_time:
            self.__start_time = start_time
        if end_time:
            self.__end_time = end_time
        if status:
            self.__status = status

    def get_schedule_slot_details(self):
        return {
            'slot_id': self.__slot_id,
            'date': self.__date,
            'start_time': self.__start_time,
            'end_time': self.__end_time,
            'status': self.__status
        }

    def __compute_slot_duration(self):
        return self.__end_time - self.__start_time


'''
Student Counseling Data Management System (SCDMS): SessionNotes Module
'''
class SessionNotes:
    def __init__(self, session_notes_id, title, notes, added_by, date_added=None):
        self.__session_notes_id = session_notes_id
        self.__title = title
        self.__notes = notes
        self.__added_by = added_by
        self.__date_added = date_added if date_added else datetime.now()

    def update_session_notes(self, title=None, notes=None):
        if title:
            self.__title = title
        if notes:
            self.__notes = notes

    def get_session_notes(self):
        return {
            'session_notes_id': self.__session_notes_id,
            'title': self.__title,
            'notes': self.__notes,
            'added_by': self.__added_by.get_details(),
            'date_added': self.__date_added
        }


'''
Student Counseling Data Management System (SCDMS): Session Module
'''
class Session:
    def __init__(self, session_id, session_schedule, student, counselor):
        self.__session_id = session_id
        self.__session_schedule = session_schedule
        self.__student = student
        self.__counselor = counselor
        self.__session_notes = None

    def update_session_details(self, session_schedule=None, student=None, counselor=None):
        if session_schedule:
            self.__session_schedule = session_schedule
        if student:
            self.__student = student
        if counselor:
            self.__counselor = counselor
    
    def get_session_details(self):
        return {
            'session_id': self.__session_id,
            'session_schedule': self.__session_schedule,
            'student': self.__student,
            'counselor': self.__counselor,
            'session_notes': self.__session_notes
        }


# -------------------------
# Subclasses of Session
# -------------------------
class GuidanceSession:
    def __init__(self, session_id, slot, student_name, notes, session_type):
        self.session_id = session_id
        self.slot = slot
        self.student_name = student_name
        self.notes = notes
        self.session_type = session_type

    def get_info(self):
        return {
            "session_id": self.session_id,
            "slot": self.slot.get_schedule_slot_details(),
            "student_name": self.student_name,
            "notes": self.notes,
            "session_type": self.session_type
        }


class MentalHealthSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, chief_complaint, symptom_severity, 
                 therapeutic_approach_used, interventions, treatment_plan):
        super().__init__(session_id, session_schedule, student, counselor)
        self.__session_notes = session_notes
        self.__chief_complaint = chief_complaint
        self.__symptom_severity = symptom_severity
        self.__therapeutic_approach_used = therapeutic_approach_used
        self.__interventions = interventions
        self.__treatment_plan = treatment_plan

    def add_session_notes(self, session_notes):
        self.__session_notes = session_notes

    def get_session_notes(self):
        return (
            self.__session_notes.get_session_notes()
            if isinstance(self.__session_notes, SessionNotes) 
            else self.__session_notes
        )


class CareerSession(Session):
    def __init__(self, session_id, session_schedule, student, counselor,
                 session_notes, career_goal, assessment_administered,
                 industry_focus, skill_gaps):
        super().__init__(session_id, session_schedule, student, counselor)
        self.__session_notes = session_notes
        self.__career_goal = career_goal
        self.__assessment_administered = assessment_administered
        self.__industry_focus = industry_focus
        self.__skill_gaps = skill_gaps

    def add_session_notes(self, session_notes):
        self.__session_notes = session_notes

    def get_session_notes(self):
        return (
            self.__session_notes.get_session_notes()
            if isinstance(self.__session_notes, SessionNotes) else self.__session_notes
        )


'''
Adviser Module
'''
class Adviser:
    def __init__(self, adviser_id, name, department):
        self.__adviser_id = adviser_id
        self.__name = name
        self.__department = department
        self.__email_address = None
        self.__mobile_no = None
        self.__advisees = []

    def get_adviser_details(self):
        return {
            'adviser_id': self.__adviser_id,
            'name': self.__name,
            'department': self.__department,
            'email_address': self.__email_address,
            'mobile_no': self.__mobile_no,
            'advisees': [advisee.get_student_details() for advisee in self.__advisees]
        }

    def update_adviser_details(self, department=None, email_address=None, mobile_no=None):
        if department:
            self.__department = department
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no

    def get_advisees(self):
        return self.__advisees

    def update_advisees(self, advisee):
        self.__advisees.append(advisee)


'''
Student Module
'''
class Student:
    def __init__(self, id_number, name, degree_program, birthday):
        self.__id_number = id_number
        self.__name = name
        self.__degree_program = degree_program
        self.__birthday = birthday
        self.__mobile_no = None
        self.__email_address = None
        self.__adviser = None

    def get_student_details(self):
        return {
            'id_number': self.__id_number,
            'name': self.__name,
            'degree_program': self.__degree_program,
            'birthday': self.__birthday,
            'mobile_no': self.__mobile_no,
            'email_address': self.__email_address,
            'adviser': self.__adviser
        }
    
    def set_adviser(self, adviser):
        self.__adviser = adviser

    def set_email(self, email_address):
        self.__email_address = email_address

    def set_degree_program(self, degree_program):
        self.__degree_program = degree_program

    def set_mobile_no(self, mobile_no):
        self.__mobile_no = mobile_no


'''
Counselor Module
'''
class Counselor:
    def __init__(self, counselor_id, name, license_number):
        self.__counselor_id = counselor_id
        self.__name = name
        self.__email_address = None
        self.__mobile_no = None
        self.__license_number = license_number
        self.__schedule = []

    def get_details(self):
        return {
            'id_number': self.__counselor_id,
            'name': self.__name,
            'email_address': self.__email_address,
            'mobile_no': self.__mobile_no,
            'license_number': self.__license_number,
            'schedule': self.__schedule
        }
    
    def get_schedule(self):
        return self.__schedule
    
    def update_counselor_details(self, name=None, email_address=None, mobile_no=None, schedule=None):
        if name:
            self.__name = name
        if email_address:
            self.__email_address = email_address
        if mobile_no:
            self.__mobile_no = mobile_no
        if schedule:
            self.__schedule = schedule


class GuidanceCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, academic_specialties=None, support_programs=None, disciplinary_liaison=False):
        super().__init__(counselor_id, name, license_number)
        self.__academic_specialties = academic_specialties
        self.__support_programs = support_programs
        self.__disciplinary_liaison = disciplinary_liaison

    def get_disciplinary_liaison(self):
        return "Yes" if self.__disciplinary_liaison else "No"


class CareerCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, industry_expertise=None, career_tools=None, alumni_connections=None):
        super().__init__(counselor_id, name, license_number)
        self.__industry_expertise = industry_expertise
        self.__career_tools = career_tools
        self.__alumni_connections = alumni_connections


class MentalHealthCounselor(Counselor):
    def __init__(self, counselor_id, name, license_number, specialization=None, therapeutic_approaches=None):
        super().__init__(counselor_id, name, license_number)
        self.__specialization = specialization
        self.__therapeutic_approaches = therapeutic_approaches


'''
Report Module
'''
class Report(ABC):
    def __init__(self, report_id, title, date_generated=None):
        self.report_id = report_id
        self.title = title
        if isinstance(date_generated, str):
            self.date_generated = datetime.strptime(date_generated, "%d-%m-%Y").date()
        else:
            self.date_generated = date_generated if date_generated else date.today()

    @abstractmethod
    def get_report_data(self):
        pass


class StudentReport(Report):
    def __init__(self, report_id, title, student_name, student_id, sessions, date_generated=None):
        super().__init__(report_id, title, date_generated)
        self.student_name = student_name
        self.student_id = student_id
        self.sessions = sessions

    def get_report_data(self):
        return self.sessions


class CounselorReport(Report):
    def __init__(self, report_id, title, counselor_name, counselor_id, sessions, date_generated=None):
        super().__init__(report_id, title, date_generated)
        self.counselor_name = counselor_name
        self.counselor_id = counselor_id
        self.sessions = sessions

    def get_report_data(self):
        return self.sessions


# -------------------------
# PRINTING SECTION (ONLY REPORTS)
# -------------------------
if __name__ == "__main__":
    # Sample Student Report sessions (from PDF)
    student_sessions = [
        {
            "session_id": "S-101",
            "date": "05-Aug-25",
            "counselor": "Jane Doe",
            "type": "Career",
            "notes": [
                "Student expressed interest in a career in cybersecurity.",
                "Conducted initial career interest assessment to identify strengths and areas of interest.",
                "Advised on relevant internships."
            ]
        },
        {
            "session_id": "S-103",
            "date": "12-Aug-25",
            "counselor": "Jane Doe",
            "type": "Career",
            "notes": [
                "Follow-up to previous session.",
                "Reviewed and critiqued the student's resume.",
                "Provided specific suggestions for improving the 'Skills' and 'Experience' sections.",
                "Advised on preparing for technical interviews."
            ]
        }
    ]

    # Sample Counselor Report sessions (from PDF)
    counselor_sessions = [
        {
            "session_id": "S-101",
            "date": "05-Aug-25",
            "student": "Juan Dela Cruz",
            "type": "Career",
            "notes": ["Discussed career assessment results."]
        },
        {
            "session_id": "S-102",
            "date": "07-Aug-25",
            "student": "Maria Santos",
            "type": "Mental Health",
            "notes": ["Addressed stress management techniques."]
        },
        {
            "session_id": "S-103",
            "date": "12-Aug-25",
            "student": "Juan Dela Cruz",
            "type": "Career",
            "notes": ["Reviewed and critiqued the student's resume.", "Provided feedback."]
        }
    ]

    # Create reports
    student_report = StudentReport("SR001", "Career Sessions", "Juan Dela Cruz", "2022-5012", student_sessions)
    counselor_report = CounselorReport("CR001", "Counseling Sessions", "Jane Doe", "GC001", counselor_sessions)

    # --- Print Student Report ---
    print("\n\033[1mStudent Report\033[0m")
    for session in student_report.get_report_data():
        print("Session ID:", session["session_id"])
        print("Date:", session["date"])
        print("Counselor Name:", session["counselor"])
        print("Session Type:", session["type"])
        print("Notes:", session["notes"][0])
        for line in session["notes"][1:]:
            print("      " + line)
        print()

    # --- Print Counselor Report ---
    print("\n\033[1mCounselor Report\033[0m")
    for session in counselor_report.get_report_data():
        print("Session ID:", session["session_id"])
        print("Date:", session["date"])
        print("Student Name:", session["student"])
        print("Session Type:", session["type"])
        print("Notes:", session["notes"][0])
        for line in session["notes"][1:]:
            print("      " + line)
        print()
