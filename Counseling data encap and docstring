''' 
Note: We use __ (double underscore) for private attributes, 
and single underscore (_) for protected ones. 
'''

class counselingdata:
    ''' 
    This initiates a class for the counselingdata wherein it will contain the 
    session-related information and manage the organization and access of counseling records.
    '''

    def __init__(self, session_id, session_date, service, session_status, counselor_name, advisor_name, student_name, session_notes, follow_up, next_appointment):
        '''
        This initializes the details needed for the counseling session with parameters, including attributes such as:
        session_id = a unique code given to each session so that it can be easily identified and tracked
        service = type of service provided
        session_status = reveals if the session is completed, ongoing, waiting, not started, or rescheduled
        counselor_name = name of the counselor
        advisor_name = name of the adviser
        student_name = name of the attending student
        session_notes = the counselorâ€™s notes written during the session
        follow_up = indicates whether the student will need another session
        next_appointment = the schedule for the follow-up session
        '''

        # Public
        self.session_id = session_id

        # Private  
        self.__counselor_name = counselor_name
        self.__advisor_name = advisor_name
        self.__student_name = student_name
        self.__session_notes = session_notes

        # Protected
        self._session_date = session_date
        self._service = service
        self._session_status = session_status
        self._follow_up = follow_up
        self._next_appointment = next_appointment

        ''' Using the getter and setter, we can access the information even if it's protected or private. '''

    # PUBLIC
    def get_session_id(self):
        '''
        This returns the session ID when asked.
        '''
        return self.session_id

    def set_session_id(self, session_id):
        if session_id.startswith("CD") and len(session_id) == 8 and session_id[2:].isdigit():
            self.session_id = session_id
        else:
            raise ValueError("Invalid Session ID")

        '''
        This authenticates and helps track each counseling session, making it easier to distinguish one session from another.  
        To validate it, the function first checks if the input starts with "CD", which stands for "Counseling Data".  
        Then, it checks if the entire ID is exactly 8 characters long (2 letters followed by 6 digits).  
        Finally, it verifies that the characters after the first two characters, CD, are all valid numbers.
        '''

    # PRIVATE
    def get_counselor_name(self):  
        ''' 
        This returns the councelor name. 
        '''
        return self.__counselor_name

    def get_advisor_name(self):
        ''' 
        This returns the Advisor name. 
        '''
        return self.__advisor_name  

    def get_student_name(self):
        ''' 
        This returns the student name. 
        '''
        return self.__student_name  

    def view_session_notes(self):
        ''' 
        This returns the session notes. 
        '''
        return self.__session_notes

    def set_session_notes(self, updated_session_notes):
        ''' 
        This returns the updated session notes. 
        '''
        self.__session_notes = updated_session_notes

    # PROTECTED
    def get_session_date(self):
        ''' 
        This returns the session date. 
        '''
        return self._session_date

    def get_service(self):
        ''' 
        This returns the type of service. 
        '''
        return self._service

    def get_session_status(self):
        ''' 
        This returns the current status of the session. 
        '''
        return self._session_status

    def update_session_status(self, new_session_status):
        ''' 
        This updates the session status when it is changed by assigning a new value to it.
        '''
        self._session_status = new_session_status

    def get_follow_up(self):
        ''' 
        This the follow-up status based on whether the counselor determines that 
        the student needs a follow-up session, by assigning a new value to it.
        '''
        return self._follow_up

    def update_follow_up(self, new_follow_up):
        ''' 
        This updates the follow-up status based on whether the counselor determines that 
        the student needs a follow-up session, by assigning a new value to it.
        '''
        self._follow_up = new_follow_up
    
    def get_next_appointment(self):
        ''' 
        This next appointment schedule based on the follow-up 
        recommendation provided by the counselor.
        '''
        return self._next_appointment

    def update_next_appointment(self, updated_next_appointment):
        self._next_appointment = updated_next_appointment
        ''' 
        This updates the appointment schedule based on the follow-up 
        recommendation provided by the counselor.
        '''


# TESTING
if __name__ == "__main__":
    
    counselingdata_1 = counselingdata(
        session_id = "CD725002",
        session_date = "July 07 2025 (2PM to 3PM)",
        service = "Individual Assessment",
        session_status = "Waiting",
        counselor_name = "Casey Scout",
        advisor_name = "Maricel Panganiban",
        student_name = "Juan A. Dela Cruz",
        session_notes = None,
        follow_up = "Not Applicable",
        next_appointment = "Not Applicable"
    )

    # Public
    print("Session ID:", counselingdata_1.session_id)

    # Private
    print("Counselor Name:", counselingdata_1.get_counselor_name())
    print("Advisor Name:", counselingdata_1.get_advisor_name())
    print("Student Name:", counselingdata_1.get_student_name())

    # Protected
    print("Session Date:", counselingdata_1.get_session_date())
    print("Type of Service:", counselingdata_1.get_service())
    print("Session Status:", counselingdata_1.get_session_status())
    print("Follow Up:", counselingdata_1.get_follow_up())
    print("Next Appointment:", counselingdata_1.get_next_appointment_)
